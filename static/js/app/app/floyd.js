// Generated by CoffeeScript 1.6.3
define([], function() {
  var PixelsFor, diffuseError, ditherPixel, exports, getIndex, getPixel, k, loadImage, process, quantize, quantizePixel, randomNoise, setPixel,
    _this = this;
  getIndex = function(_arg) {
    var imageData, index, x, y;
    imageData = _arg.imageData, x = _arg.x, y = _arg.y;
    return index = (x + y * imageData.width) * 4;
  };
  getPixel = function(_arg) {
    var color, imageData, index, x, y;
    imageData = _arg.imageData, x = _arg.x, y = _arg.y;
    index = getIndex({
      imageData: imageData,
      x: x,
      y: y
    });
    return color = {
      r: imageData.data[index + 0],
      g: imageData.data[index + 1],
      b: imageData.data[index + 2],
      a: imageData.data[index + 3]
    };
  };
  setPixel = function(_arg) {
    var a, b, color, g, imageData, index, r, x, y;
    imageData = _arg.imageData, x = _arg.x, y = _arg.y, color = _arg.color;
    index = getIndex({
      imageData: imageData,
      x: x,
      y: y
    });
    r = color.r, g = color.g, b = color.b, a = color.a;
    imageData.data[index + 0] = r;
    imageData.data[index + 1] = g;
    imageData.data[index + 2] = b;
    return imageData.data[index + 3] = a;
  };
  PixelsFor = function(imageData) {
    var Pixels;
    return Pixels = function(x, y) {
      return {
        get: function() {
          return getPixel({
            imageData: imageData,
            x: x,
            y: y
          });
        },
        set: function(color) {
          return setPixel({
            imageData: imageData,
            x: x,
            y: y,
            color: color
          });
        }
      };
    };
  };
  randomNoise = function(imageData) {
    var b, g, i, r, x, y;
    i = 0;
    while (i < 10000) {
      x = Math.random() * width | 0;
      y = Math.random() * height | 0;
      r = Math.random() * 256 | 0;
      g = Math.random() * 256 | 0;
      b = Math.random() * 256 | 0;
      setPixel({
        imageData: imageData,
        x: x,
        y: y,
        r: r,
        g: g,
        b: b,
        a: 255
      });
      i++;
    }
    return imageData;
  };
  loadImage = function(ctx, src, x, y, onload) {
    var image;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (onload == null) {
      onload = null;
    }
    image = new Image();
    image.src = src;
    return image.onload = function() {
      ctx.drawImage(image, x, y);
      if (onload != null) {
        console.log('onload!');
        return onload();
      }
    };
  };
  quantize = function(color, bits) {
    var c, depth, e, error, qc, quantized, ratio, step, _i, _len, _ref;
    depth = Math.pow(2, bits);
    error = {};
    quantized = {};
    _ref = ['r', 'g', 'b', 'a'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      ratio = Math.floor(color[c] / 255 * depth);
      step = 255 / depth;
      qc = ratio * step;
      e = Math.abs(qc - color[c]);
      error[c] = e;
      quantized[c] = qc;
    }
    return {
      error: error,
      quantized: quantized
    };
  };
  diffuseError = function(color, weight, error) {
    var c, diffused, _i, _len, _ref;
    diffused = {};
    _ref = ['r', 'g', 'b', 'a'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      diffused[c] = Math.floor(color[c] + weight * error[c]);
    }
    return diffused;
  };
  quantizePixel = function(Pixels, x, y, bits) {
    var color, error, quantized, _ref;
    color = Pixels(x, y).get();
    _ref = quantize(color, bits), error = _ref.error, quantized = _ref.quantized;
    return Pixels(x, y).set(quantized);
  };
  k = 1 / 16;
  ditherPixel = function(Pixels, x, y, bits) {
    var color, diffused, error, o, offsets, quantized, _i, _len, _ref, _results;
    color = Pixels(x, y).get();
    _ref = quantize(color, bits), error = _ref.error, quantized = _ref.quantized;
    Pixels(x, y).set(quantized);
    offsets = [
      {
        x: 1,
        y: 0,
        weight: 7 * k
      }, {
        x: -1,
        y: 1,
        weight: 3 * k
      }, {
        x: 0,
        y: 1,
        weight: 5 * k
      }, {
        x: 1,
        y: 1,
        weight: 1 * k
      }
    ];
    _results = [];
    for (_i = 0, _len = offsets.length; _i < _len; _i++) {
      o = offsets[_i];
      diffused = diffuseError(Pixels(x + o.x, y + o.y).get(), o.weight, error);
      _results.push(Pixels(x + o.x, y + o.y).set(diffused));
    }
    return _results;
  };
  process = function(imageData, bits, processPixel) {
    var Pixels, height, width, x, y, _i, _j, _ref, _ref1;
    Pixels = PixelsFor(imageData);
    width = imageData.width, height = imageData.height;
    for (x = _i = 0, _ref = width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      for (y = _j = 0, _ref1 = height - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        processPixel(Pixels, x, y, bits);
      }
    }
    return imageData;
  };
  exports = {
    loadImage: loadImage,
    ditherPixel: ditherPixel,
    quantizePixel: quantizePixel,
    process: process
  };
  return exports;
});
