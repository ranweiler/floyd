// Generated by CoffeeScript 1.6.2
var cantorTo, cantorize, drawCantor, drawGenCantor, drawInterval, genCantorTo, genCantorize, nextCantor, nextGenCantor, resetCanvas;

resetCanvas = function() {
  var canvas;

  canvas = document.getElementById('whiteboard');
  canvas.width += 1;
  return canvas.width -= 1;
};

drawInterval = function(ctx, y) {
  return function(_arg) {
    var a, b;

    a = _arg[0], b = _arg[1];
    ctx.beginPath();
    ctx.moveTo(a, y);
    ctx.lineTo(b, y);
    ctx.closePath();
    return ctx.stroke();
  };
};

cantorize = function(interval) {
  var a, b, size;

  a = interval[0], b = interval[1];
  size = Math.abs(b - a);
  return [[a, a + size * (1 / 3)], [b - size * (1 / 3), b]];
};

nextCantor = function(xs) {
  xs = xs.map(cantorize).reduce(function(x, y) {
    return x.concat(y);
  });
  return xs;
};

cantorTo = function(n) {
  var i, xs, _i;

  xs = [[0, 1]];
  if (n < 1) {
    return xs;
  }
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    xs = nextCantor(xs);
  }
  return xs;
};

drawCantor = function(k) {
  var canvas, ctx, i, xs, _i, _ref, _results;

  canvas = document.getElementById('whiteboard');
  ctx = canvas.getContext('2d');
  ctx.fillStyle = 'rgb(0,0,0)';
  ctx.lineWidth = 1.0;
  ctx.scale(canvas.width, canvas.height / (k * 2));
  ctx.translate(0, ctx.lineWidth / 2);
  _results = [];
  for (i = _i = 0, _ref = k - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    xs = cantorTo(i);
    _results.push(xs.map(drawInterval(ctx, 0 + 2 * i)));
  }
  return _results;
};

genCantorize = function(pattern) {
  return function(interval) {
    var a, b, c, divisions, i, result, size, x;

    a = interval[0], b = interval[1];
    size = Math.abs(b - a);
    divisions = pattern.length;
    c = size / divisions;
    result = ((function() {
      var _i, _len, _results;

      _results = [];
      for (i = _i = 0, _len = pattern.length; _i < _len; i = ++_i) {
        x = pattern[i];
        _results.push(x ? [a + i * c, a + (i + 1) * c] : void 0);
      }
      return _results;
    })()).filter(function(x) {
      return x != null;
    });
    return result;
  };
};

nextGenCantor = function(pattern) {
  return function(xs) {
    xs = xs.map(genCantorize(pattern)).reduce(function(x, y) {
      return x.concat(y);
    });
    return xs;
  };
};

genCantorTo = function(pattern, n) {
  var i, xs, _i, _nextGC;

  xs = [[0, 1]];
  if (n < 1) {
    return xs;
  }
  _nextGC = nextGenCantor(pattern);
  for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
    xs = _nextGC(xs);
  }
  return xs;
};

drawGenCantor = function(pattern, k) {
  var canvas, ctx, i, xs, _i, _ref, _results;

  canvas = document.getElementById('whiteboard');
  ctx = canvas.getContext('2d');
  ctx.fillStyle = 'rgb(0,0,0)';
  ctx.lineWidth = 1.0;
  ctx.scale(canvas.width, canvas.height / (k * 2));
  ctx.translate(0, ctx.lineWidth / 2);
  _results = [];
  for (i = _i = 0, _ref = k - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    xs = genCantorTo(pattern, i);
    _results.push(xs.map(drawInterval(ctx, 0 + 2 * i)));
  }
  return _results;
};

$().ready(function() {
  drawGenCantor([1, 0, 1], 8);
  return $('#redraw').click(function() {
    var depth, pattern;

    console.log('redrawing');
    resetCanvas();
    pattern = eval($('#pattern').val());
    depth = eval($('#depth').val());
    return drawGenCantor(pattern, depth);
  });
});
